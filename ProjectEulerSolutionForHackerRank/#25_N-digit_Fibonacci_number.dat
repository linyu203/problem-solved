to share this solution for N-digit Fibonacci Number with C++
5000 digital number is a huge number for C++, 
and this solution use <int> to solve this problem without large digital,
in N-liner time complex and memory cost by two little trickies:
"to_string(cur)>to_string(last)" and "if(cur%10 >= 5) carry =1; cur/=10;"

https://www.hackerrank.com/contests/projecteuler/challenges/euler025

Project Euler #25: N-digit Fibonacci number
Original link:
https://www.hackerrank.com/contests/projecteuler/challenges/euler025


This problem is a programming version of Problem 25 from projecteuler.net

The Fibonacci sequence is defined by the recurrence relation:
       F(n) = F(n-1) +F(n-2), where F(1)= 1 and F(2) =1
Hence the first 12 terms will be: 
       F(3) = 2 F(4) = 3 F(5) = 5 F(6) = 8 F(7) = 13 F(8) = 21
       F(9) = 34 F(10)=55 F(11) = 89 F(12) = 144


The 12th term, F(12), is the first term to contain three digits. 
What is the first term in the Fibonacci sequence to contain N digits?

Input Format

The first line contains an integer T , i.e., number of test cases. 
Next  lines will contain an integer N.

Constraints
1<=T<=5000
2<=N<=5000
 

Output Format

Print the values corresponding to each test case.

Sample Input

2
3
4
Sample Output

12
17
 
___ code__

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    vector<int>res(5001);
    int cur = 1;
    int last = 1;
    int cnt = 2;
    res[0] = 0;
    res[1] = 1;
    for(int i = 2; i <= 5000; i++){
        do{
            last += cur;
            swap(last,cur);
            cnt ++;
        }while(to_string(cur)>to_string(last));
        if(cur >= 1e8){
            int carry = 0;
            if(cur%10 >= 5) carry =1;
            cur/=10;
            cur += carry;
            if(last%10 >= 5) carry =1;
            else carry = 0;
            last /= 10;
            last += carry;
        }
        res[i] = cnt;
    }
    int n;
    
    cin>>n;
    while(n--){
        int temp;
        cin>>temp;
        cout<<res[temp]<<endl;
    }
    return 0;
}
