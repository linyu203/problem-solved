568. Maximum Vacation Days
https://leetcode.com/problems/maximum-vacation-days/

LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.

Rules and restrictions:
You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.
The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.
You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we don't consider the impact of flight time.
For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.
You're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.

Example 1:
Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]
Output: 12
Explanation: 
Ans = 6 + 3 + 3 = 12. 

One of the best strategies is:
1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. 
(Although you start at city 0, we could also fly to and start at other cities since it is Monday.) 
2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.
3rd week : stay at city 2, and play 3 days and work 4 days.
Example 2:
Input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]
Output: 3
Explanation: 
Ans = 1 + 1 + 1 = 3. 

Since there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. 
For each week, you only have one day to play and six days to work. 
So the maximum number of vacation days is 3.
Example 3:
Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]
Output: 21
Explanation:
Ans = 7 + 7 + 7 = 21

One of the best strategies is:
1st week : stay at city 0, and play 7 days. 
2nd week : fly from city 0 to city 1 on Monday, and play 7 days.
3rd week : fly from city 1 to city 2 on Monday, and play 7 days.
Note:
N and K are positive integers, which are in the range of [1, 100].
In the matrix flights, all the values are integers in the range of [0, 1].
In the matrix days, all the values are integers in the range [0, 7].
You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days.
If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.
We don't consider the impact of flight hours towards the calculation of vacation days.


This is a standard DP question. All we need to do is basically fill up the table of size (N x K). The value in the table will have such meaning: at index [i, j], the value stored stands for the maximum days off we can get if we start our planning at city i in week j. We start with the last column filled with the number of days off in last week in each city, and progress backward. For index [i, j] the value is max([i + 1, p]) + days[i, j] where i has a flight to p. Lastly, as we can just fly to away on the first day of the first week, we need to look at the cities in the first column to see which one is reachable from city 0 and has max days off. Also note that we fill the diagnal of the flight table with 1 just to enable the option of staying at the same city.

An example will be:

flights:                    days:
[[0, 1, 1],                [[1, 3, 1],
 [1, 0, 1],                 [6, 0, 3],
 [1, 1, 0]]                 [3, 3, 3]]
We first convert flights to:

[[1, 1, 1], 
 [1, 1, 1], 
 [1, 1, 1]] 
Then our table will be:

[[  7, 6, 1],
 [ 12, 3, 3],
 [  9, 6, 3]]
Lastly, we will iterate through the flight table and the first column to see which one we can fly to at the beginning at the first week from the first city. Luckly, we can go anywhere we want, and the second city will bring us the most vacations.

class Solution {
public:
  int maxVacationDays(vector<vector<int>>& flights, 
                      vector<vector<int>>& days) {
    int n = flights.size();
    int k = days[0].size();
    // We only create two columns of the table, just to optimize memory.
    vector<vector<int>> table = {{}, {}};
    table[0].resize(n);
    table[1].resize(n);
    // Fill the flight to self to 1
    for (int i = 0; i < n; ++i) {
      flights[i][i] = 1;
    }
    // Copy the last week days to our base case
    for (int j = 0; j < n; ++j) {
      table[0][j] = days[j][n - 1];
    }
    int i = 1;
    // Fill the table
    for (; i < k; ++i) {
      for (int j = 0; j < n; ++j) {
        int max = 0;
        for (int p = 0; p < n; ++p) {
          int max_next = flights[j][p] * table[(i + 1) % 2][p];
          if (max_next > max) {
            max = max_next;
          }
        }
        max += days[j][k - i - 1];
        table[i % 2][j] = max;
      }
    }
    // Since we can make a flight on the very first day of 
    // week 1, then just check which city we can get the
    // most vacations and fly there
    int max = 0;
    for (int j = 0; j < n; ++j) {
      int max_days = flights[0][j] * table[(i + 1) % 2][j];
      if (max_days > max) {
        max = max_days;
      }
    }
    return max;
  }
};




class Solution {
public:
    int maxVacationDays(vector<vector<int>>& flights, vector<vector<int>>& days) {
        int nCities = flights.size(), nWeeks = days[0].size();
        
        vector<vector<int>> graphs(nCities,vector<int>{});
        for(int from=0; from<nCities; ++from) {
            for(int to=0; to<nCities; ++to) {
                if(flights[from][to] || from==to)
                    graphs[from].push_back(to);
            }
        }
        
        //max days (pair.first) so far for city (pair.seccond)
        priority_queue<pair<int,int>> maxDays;
        maxDays.push({0,0});
        
        for(int week=0; week<nWeeks; ++week) {
            priority_queue<pair<int,int>> maxDaysNew;
            vector<bool> visited(nCities, false);
            while(maxDaysNew.size()<nCities && !maxDays.empty()) {
                int cityFrom = maxDays.top().second, dayFrom = maxDays.top().first;
                maxDays.pop();
                
                for(int cityTo : graphs[cityFrom]) {
                    if(!visited[cityTo]) {
                        maxDaysNew.push({dayFrom+days[cityTo][week], cityTo});
                        visited[cityTo] = true;
                    }
                }
            }
            swap(maxDays, maxDaysNew);
        }
        
        return maxDays.top().first;
    }
};
