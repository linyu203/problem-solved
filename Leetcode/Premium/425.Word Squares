425.Word Squares
https://leetcode.com/problems/word-squares/

Given a set of words (without duplicates), find all word squares you can build from them.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 â‰¤ k < max(numRows, numColumns).

For example, the word sequence ["ball","area","lead","lady"] forms a word square because each word reads the same both horizontally and vertically.

b a l l
a r e a
l e a d
l a d y
Note:
There are at least 1 and at most 1000 words.
All words will have the exact same length.
Word length is at least 1 and at most 5.
Each word contains only lowercase English alphabet a-z.
Example 1:

Input:
["area","lead","wall","lady","ball"]

Output:
[
  [ "wall",
    "area",
    "lead",
    "lady"
  ],
  [ "ball",
    "area",
    "lead",
    "lady"
  ]
]

Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).
Example 2:

Input:
["abat","baba","atan","atal"]

Output:
[
  [ "baba",
    "abat",
    "baba",
    "atan"
  ],
  [ "baba",
    "abat",
    "baba",
    "atal"
  ]
]

Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).



Optimized to 70ms by pre-size the vec instead of push_back and pop_back

class Solution {
public:
    struct TrieNode {
        vector<int> indexs;
        vector<TrieNode*> children;
        TrieNode() {
            children.resize(26, nullptr);
        }
    };

    TrieNode* buildTrie(vector<string>& words) {
        TrieNode* root = new TrieNode();
        for (int j = 0; j < words.size(); j++) {
            TrieNode* t = root;
            for (int i = 0; i < words[j].size(); i++) {
                if (!t->children[words[j][i] - 'a'])
                    t->children[words[j][i] - 'a'] = new TrieNode();
                t = t->children[words[j][i] - 'a'];
                t->indexs.push_back(j);
            }
        }
        return root;
    }
    
    vector<vector<string>> res;
    vector<string> vec;
    void backtrack(vector<string>& words, int level, TrieNode* root) {
        if (level >= words[0].size()) {
            res.push_back(vec);
            return;
        }
        string str = "";
        for (int i = 0; i < level; i++) 
            str += vec[i][level];
        TrieNode* t = root;     
        for (int i = 0; i < str.size(); i++) 
            if (!(t = t->children[str[i] - 'a'])) return;
        for (auto index : t->indexs) {
            vec[level] = words[index];
            backtrack(words, level + 1, root);
        }
    }
    
    vector<vector<string>> wordSquares(vector<string>& words) {
        if (words.empty()) return res;
        TrieNode* root = buildTrie(words);
        vec.resize((int)words[0].size());
        for (auto& word : words) {
            vec[0] = word;
            backtrack(words, 1, root);
        }
        return res;
    }
};


sample 12 ms submission
class Solution {
    
    struct TrieNode {
        vector<int> prefix;
        TrieNode* childs[26];
        TrieNode () {
            memset(childs, 0, sizeof(childs));
        }
    };
    
    TrieNode* build(vector<string>& words) {
        TrieNode* root = new TrieNode();
        for (int i = 0; i < words.size(); i++) {
            TrieNode* p = root;
            for (int j = 0; j < words[i].size(); j++) {
                if (p->childs[words[i][j]-'a'] == NULL) {
                    p->childs[words[i][j]-'a'] = new TrieNode();
                }
                p = p->childs[words[i][j]-'a'];
                p->prefix.push_back(i);
            }
        }
        return root;
    }
    void helper(vector<vector<string>>& ans, vector<string>& board, vector<string>& words, TrieNode* root, int row) {
        if (row == board.size()) {
            ans.push_back(board);
            return;
        }
        TrieNode* p = root;
        for (int i = 0; i < row; i++) {
            //cout<<board[i][row]<<endl;
            if (p->childs[board[i][row]-'a'] == NULL) return;
            p = p->childs[board[i][row]-'a'];
        }
        for (int i:p->prefix) {
            //cout<<"prefix is "<<words[i]<<endl;
            board[row] = words[i];
            helper(ans, board, words, root, row+1);
        }
    }
    
public:
    vector<vector<string>> wordSquares(vector<string>& words) {
        int n = words[0].size();
        TrieNode* root = build(words);
        vector<vector<string>> ans;
        vector<string> board(n);
        for (int i = 0; i < words.size(); i++) {
            board[0] = words[i];
            helper(ans, board, words, root, 1);
        }
        return ans;
    }
};


