351.android-unlock-patterns
https://leetcode.com/problems/android-unlock-patterns/
Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.

 

Rules for a valid pattern:

Each pattern must connect at least m keys and at most n keys.
All the keys must be distinct.
If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.
The order of keys used matters.
 


 

Explanation:

| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |
Invalid move: 4 - 1 - 3 - 6 
Line 1 - 3 passes through key 2 which had not been selected in the pattern.

Invalid move: 4 - 1 - 9 - 2
Line 1 - 9 passes through key 5 which had not been selected in the pattern.

Valid move: 2 - 4 - 1 - 3 - 6
Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern

Valid move: 6 - 5 - 4 - 1 - 9 - 2
Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.

 

Example:

Input: m = 1, n = 1
Output: 9





int dp[1 << 9][3][3][10];

class Solution {
private:
    bool valid(int board, int r1, int c1, int r2, int c2) {
        if (r1 == r2 && c1 == c2) {
            return false;
        }

        if ((board & (1 << (r2 * 3 + c2))) != 0) {
            return false;
        }

        if (abs(r1 - r2) == 2 && abs(c1 - c2) == 2) {
            return (board & (1 << (1 * 3 + 1))) != 0;
        }

        if (r1 == r2 && abs(c1 - c2) == 2) {
            return (board & (1 << (r1 * 3 + 1))) != 0;
        }

        if (c1 == c2 && abs(r1 - r2) == 2) {
            return (board & (1 << (1 * 3 + c1))) != 0;
        }

        return true;
    }

    int numWays(int board, int row, int col, int cnt) {
        if (cnt == 1) {
            return 1;
        }

        if (dp[board][row][col][cnt] != -1) {
            return dp[board][row][col][cnt];
        }

        int res = 0;

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (valid(board, row, col, i, j)) {
                    res += numWays(board | (1 << (row * 3 + col)), i, j, cnt - 1);
                }
            }
        }

        dp[board][row][col][cnt] = res;
        return res;
    }
public:
    int numberOfPatterns(int m, int n) {
        for (int i = 0; i < (1 << 9); ++i) {
            for (int r = 0; r < 3; ++r) {
                for (int c = 0; c < 3; ++c) {
                    for (int cnt = 0; cnt < 10; ++cnt) {
                        dp[i][r][c][cnt] = -1;
                    }
                }
            }
        }
        int res = 0;
        for (int i = m; i <= n; ++i) {
            for (int r = 0; r < 3; ++r) {
                for (int c = 0; c < 3; ++c) {
                    res += numWays(0, r, c, i);
                }
            }
        }
        return res;
    }
};





× Close
sample 0 ms submission
class Solution {

public:
bool isAllowed(int i, int used, int current) {
    if (used == 0) {
        return true;
    }
    if ((1 << i) & used) {
        return false;
    }
    // knight moves or adjacent cells (in a row or in a column)
    if ((i + current) % 2 == 1)
        return true;
    // indexes are at both end of the diagonals for example 0,0, and 8,8
    int mid = (i + current)/2;
    if (mid == 4)
        return used & (1 << mid);
    // adjacent cells on diagonal  - for example 0,0 and 1,0 or 2,0 and //1,1
    if ((i%3 != current%3) && (i/3 != current/3)) {
        return true;
    }
    // all other cells which are not adjacent
    return used & (1 << mid);
}

struct Memo {
    vector<int> data;
    Memo(): data((1 << 9) * 9) {}
    int& get(int pattern, int current) { return data[pattern * 9 + current]; }
};

int numberOfPatternsHelper(int m, int n, int used, int usedCount, int current, Memo& memo) {
    int& r = memo.get(used, current);
    if (!r) {
        r = usedCount >= m ? 1 : 0;
        if (usedCount < n) {
            for (int i = 0; i < 9; ++i) {
                if (isAllowed(i, used, current)) {
                    r += numberOfPatternsHelper(m, n, used | (1 << i), usedCount + 1, i, memo);
                }
            }
        }
    }
    return r;
}

int numberOfPatterns(int m, int n) {
    Memo memo;
    return numberOfPatternsHelper(m, n, 0, 0, 0, memo);
}};
