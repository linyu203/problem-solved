681. Next Closest Time
https://leetcode.com/problems/next-closest-time/


Given a time represented in the format "HH:MM", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

Example 1:

Input: "19:34"
Output: "19:39"
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.
Example 2:

Input: "23:59"
Output: "22:22"
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.



class Solution {
public:
    string nextClosestTime(string time) {
        // prep current time
        int h1 = time[0] - '0';
        int h2 = time[1] - '0';
        int m1 = time[3] - '0';
        int m2 = time[4] - '0';
        
        // prep (sorted) set of digits
        set<int> digits = { h1, h2, m1, m2 };
        set<int>::iterator next;
				
        // prep result string
        stringstream ss;
				
        /* strategy: try increasing each digit, otherwise wrap around */
				
        // try increasing m2
        next = digits.upper_bound(m2);
        if (next != digits.end()) {
            ss << h1 << h2 << ':' << m1 << *next;
            return ss.str();
        } else m2 = *(digits.begin());
        
        // try increasing m1
        next = digits.upper_bound(m1);
        if (next != digits.end() && *next < 6) {
            ss << h1 << h2 << ':' << *next << m2;
            return ss.str();
        } else m1 = *(digits.begin());
        
        // try increasing h2
        next = digits.upper_bound(h2);
        if (next != digits.end() && (*next < 5 || h1 < 2)) {
            ss << h1 << *next << ':' << m1 << m2;
            return ss.str();
        } else h2 = *(digits.begin());
        
        // try increasing h1
        next = digits.upper_bound(h1);
        if (next != digits.end() && *next < 3) {
            ss << *next << h2 << ':' << m1 << m2;
            return ss.str();
        } else h1 = *(digits.begin());
        
        // wrap around to next day
        ss << h1 << h2 << ':' << m1 << m2;
        return ss.str();        
    }
};




class Solution {
public:
    string nextClosestTime(string time) {
        int mins[4] = {600,60,10,1};
        size_t colon = time.find(':');
        int curr = stoi(time.substr(0,colon))*60 + stoi(time.substr(colon+1));
        string next = "0000";
        
        for(int i=1,d=0;i<=1440 && d <4;++i){
            int m = (curr+i)%1440;
            for(d = 0;d<4;++d){
                next[d] = '0'+m/mins[d];
                m %= mins[d];
                if(time.find(next[d])==string::npos) break;
            }
        }
        
        return next.substr(0,2)+':'+next.substr(2,2);
    }
};
