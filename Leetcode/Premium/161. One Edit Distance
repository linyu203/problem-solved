161. One Edit Distance
https://leetcode.com/problems/one-edit-distance/

Given two strings s and t, determine if they are both one edit distance apart.

Note: 

There are 3 possiblities to satisify one edit distance apart:

Insert a character into s to get t
Delete a character from s to get t
Replace a character of s to get t
Example 1:

Input: s = "ab", t = "acb"
Output: true
Explanation: We can insert 'c' into s to get t.
Example 2:

Input: s = "cab", t = "ad"
Output: false
Explanation: We cannot get t from s by only one step.
Example 3:

Input: s = "1203", t = "1213"
Output: true
Explanation: We can replace '0' with '1' to get t.


The idea is simple. We have four cases:

The lengths of the string are same. So we need to check if there are exactly one mismatch
The length(s) = length(t) +1 . So, we need to check if we can insert one character in t to get s
The length(t) = length(s) +1 . So, we need to check if we can insert one character in s to get t.
Otherwise return false
Here is the C++, clean and self explainable code.

bool can_replace(string &s, string &t){
    int ct = 0;
    for(int i=0;i<s.size();i++){
        if(s[i]!=t[i])
            ct++;
    }
    return ct==1;
}

bool can_insert(string &s, string &t){
    bool found = false;
    int i=0,j=0;
    for(;i<s.size();i++,j++){
        if(s[i]==t[j])
            continue;
        else if(!found && s[i]!=t[j]){
            found=true;
            i--;
        }
        else if(found && s[i]!=t[j])
            return false;
    }
    return true;    
}

bool isOneEditDistance(string s, string t) {
    if(s.size()==t.size())
        return can_replace(s,t);
    else if(s.size()==(t.size()+1))
        return can_insert(t,s);
    else if((s.size()+1)==t.size())
        return can_insert(s,t);
    else
        return false;
}

