422.valid-word-square
https://leetcode.com/problems/valid-word-square/

Given a sequence of words, check whether it forms a valid word square.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 â‰¤ k < max(numRows, numColumns).

Note:
The number of words given is at least 1 and does not exceed 500.
Word length will be at least 1 and does not exceed 500.
Each word contains only lowercase English alphabet a-z.
Example 1:

Input:
[
  "abcd",
  "bnrt",
  "crmy",
  "dtye"
]

Output:
true

Explanation:
The first row and first column both read "abcd".
The second row and second column both read "bnrt".
The third row and third column both read "crmy".
The fourth row and fourth column both read "dtye".

Therefore, it is a valid word square.
Example 2:

Input:
[
  "abcd",
  "bnrt",
  "crm",
  "dt"
]

Output:
true

Explanation:
The first row and first column both read "abcd".
The second row and second column both read "bnrt".
The third row and third column both read "crm".
The fourth row and fourth column both read "dt".

Therefore, it is a valid word square.
Example 3:

Input:
[
  "ball",
  "area",
  "read",
  "lady"
]

Output:
false

Explanation:
The third row reads "read" while the third column reads "lead".

Therefore, it is NOT a valid word square.

Compare the sequences per level.
Before the comparison of each level, make sure lenghs of row(level) and column(level) are equal.
class Solution {
    bool recursion(vector<string>& words, int size, int i) {
        if (i >= size) return true;

        // get columns and rows in level i
        int columns = words[i].size();
        int rows = 0;
        for (int j = 0; j < size; ++j) {
            if (words[j].size() > i) rows++;
        }

        // bail out earlier if `columns` and `rows` are not equal
        if (rows != columns) return false;

        // compare row/column started from i + 1
        for (int j = i + 1; j < rows; ++j) {
            if (words[i][j] != words[j][i]) return false;
        }
        
        return recursion(words, size, i + 1);
    }
    
public:
    bool validWordSquare(vector<string>& words) {
        return recursion(words, words.size(), 0);
    }
};
