255. Verify Preorder Sequence in Binary Search Tree
https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/


Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Consider the following binary search tree: 

     5
    / \
   2   6
  / \
 1   3
Example 1:

Input: [5,2,6,1,3]
Output: false
Example 2:

Input: [5,2,1,3,6]
Output: true
Follow up:
Could you do it using only constant space complexity?


5
This question is quite similar to the problem of constructing a BST from a preorder sequence. In order to achieve O(n) time complexity, we need to split the array into left subtree and right subtree and verify the BST property at the same time. If we first find the split for left and right subtrees and then verify each subtree, we have to do it in O(nlogn).
Here is an O(n) time 24ms short recursive solution. vp function just tries to extract a valid BST preorder sequence of preorder array starting from the index l and returns the end index. Note each element of this valid BST preorder sequence should be in [minv, maxv]. In the last, we can check whether the end index of this valid BST preorder sequence is the end of the whole array.
class Solution {
public:
    int vp(vector<int>& preorder, int minv, int maxv, int l)
{
	if (l >= preorder.size() || preorder[l] > maxv || preorder[l] < minv)
		return l;
	int r = vp(preorder, minv, preorder[l], l + 1);
	return vp(preorder, preorder[l], maxv, r);
}
bool verifyPreorder(vector<int>& preorder) {
	return vp(preorder, INT_MIN, INT_MAX, 0) == preorder.size();
}
};


