656.Coin Path
https://leetcode.com/problems/coin-path/

Given an array A (index starts at 1) consisting of N integers: A1, A2, ..., AN and an integer B. The integer B denotes that from any place (suppose the index is i) in the array A, you can jump to any one of the place in the array A indexed i+1, i+2, …, i+B if this place can be jumped to. Also, if you step on the index i, you have to pay Ai coins. If Ai is -1, it means you can’t jump to the place indexed i in the array.

Now, you start from the place indexed 1 in the array A, and your aim is to reach the place indexed N using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed N using minimum coins.

If there are multiple paths with the same cost, return the lexicographically smallest such path.

If it's not possible to reach the place indexed N then you need to return an empty array.

Example 1:
Input: [1,2,4,-1,2], 2
Output: [1,3,5]
Example 2:
Input: [1,2,4,-1,2], 1
Output: []
Note:
1.Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first i where Pai and Pbi differ, Pai < Pbi; when no such i exists, then n < m.
2.A1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].
3.Length of A is in the range of [1, 1000].
4.B is in the range of [1, 100].

class Solution {
public:

        vector<int> cheapestJump(vector<int>& A, int B) {
        
        int n=A.size(); if(n==0) return {};
        if(n==1) return {1};
        if(B<=0||A[n-1]==-1) return {};
        
        vector<pair<int,int>> dp(n,{INT_MAX, -1});  //{cost, next}
        dp[n-1]={A[n-1], n};
        
        for(int i=n-2;i>=0;i--)
        {
            if(A[i]==-1) continue;
            for(int j=i+1;j<n && j-i<=B;j++)
            {
                if(A[j]==-1||dp[j].first==INT_MAX) continue;
                if(A[i]+dp[j].first<dp[i].first)
                {
                    dp[i].first=A[i]+dp[j].first;
                    dp[i].second=j;
                }
            }
        }
        
        if(dp[0].first==INT_MAX) return {};
        vector<int> result;
        
        int cur=0;
        while(cur!=n)
        {
            result.push_back(cur+1);
            cur=dp[cur].second;
        }
        
        return result;
    }
};



class Solution {
public:

    const int null = INT_MAX;

    vector<int> cheapestJump(vector<int> &A, int B)
    {
        if (A[A.size() - 1] == -1) return vector<int>();
        if (A.size() == 1) return vector<int>(1, A[0]);
        vector<int> memo(A.size(), null), trace;
        dp(A, B, memo);
        backtrace(trace, memo, A, B);
        return trace;
    }

    void backtrace(vector<int> &trace, vector<int> &memo, vector<int> &A, int B)
    {
        int n = A.size();
        if (memo[0] == null) return;
        for (int i = 0; i < n - 1;)
        {
            for (int j = 1; j <= min(B, n - 1); j++)
            {
                if (i + j <= n - 1 && memo[i] == A[i] + memo[i + j])
                {
                    trace.push_back(i + 1);
                    i += j;
                    if (i == n - 1)
                        trace.push_back(n);
                    break;
                }
            }
        }
    }

    void dp(vector<int> &A, int B, vector<int> &memo)
    {
        int n = A.size();
        assert(n >= B || cerr << "n < B" << endl);
        for (int i = n - 1; i >= n - 1 - min(n - 1, B); i--)
        {
            if (A[i] != -1)
                memo[i] = A[i] * (i < n - 1) + A[n - 1];
        }
        for (int i = n - 1 - min(n - 1, B) - 1; i >= 0; i--)
            for (int j = 1; j <= B; j++)
            {
                if (A[i] != -1 && memo[i + j] != INT_MAX)
                    memo[i] = min(memo[i], A[i] + memo[i + j]);
            }
    }
};

template<typename T>
ostream &operator<<(ostream &os, const vector<T> &v)
{
    os << "[";
    for (int i = 0; i < v.size(); ++i)
    {
        os << v[i];
        if (i != v.size() - 1)
            os << ", ";
    }
    os << "]";
    return os;
}

class SolutionTester : public Solution {
public:
    void unit_test(vector<int> A, int B, vector<int> ans)
    {
        assert(cheapestJump(A, B) == ans ||
               cout << "FAIL!" << endl
                    << "A:" << A << endl
                    << "B:" << B << endl
                    << "expected:" << ans << endl
                    << "actual:" << cheapestJump(A, B));
    }

    void run()
    {
        unit_test({1, 2, 4, -1, 2}, 2, {1, 3, 5});
        unit_test({0, 0, 0, 0, 0, 0}, 3, {1, 2, 3, 4, 5, 6});
        unit_test({1, 2, 4, -1, 2}, 1, {});
        unit_test({0, -1, -1, -1, -1, -1}, 5, {});
    }
};
