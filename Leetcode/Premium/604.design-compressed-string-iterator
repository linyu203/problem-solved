604.design-compressed-string-iterator
https://leetcode.com/problems/design-compressed-string-iterator/
Design and implement a data structure for a compressed string iterator. It should support the following operations: next and hasNext.

The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.

next() - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.
hasNext() - Judge whether there is any letter needs to be uncompressed.

Note:
Please remember to RESET your class variables declared in StringIterator, as static/class variables are persisted across multiple test cases. Please see here for more details.

Example:

StringIterator iterator = new StringIterator("L1e2t1C1o1d1e1");

iterator.next(); // return 'L'
iterator.next(); // return 'e'
iterator.next(); // return 'e'
iterator.next(); // return 't'
iterator.next(); // return 'C'
iterator.next(); // return 'o'
iterator.next(); // return 'd'
iterator.hasNext(); // return true
iterator.next(); // return 'e'
iterator.hasNext(); // return false
iterator.next(); // return ' '



class StringIterator {
public:
    string comp;
    int loc, occ, occsize;
    
    StringIterator(string compressedString):comp(compressedString),loc(0),occ(0),occsize(0){
        update();
    }
		
    void update(){
        int N = comp.size();
        if(!occ && loc < N){
            occsize = 0;
            for(int i = loc + 1; i < N && isdigit(comp[i]); ++i){
                occ = occ*10 + comp[i] - '0';
                occsize++;
            }
            
            if(!occ){
                loc += occsize + 1;
            }
            
            update();
        }
    }
    
    char next() {
        if(!hasNext()){
            return ' ';
        }
        
        char toRet = comp[loc];
        occ--;
        
        if(!occ){
            loc += occsize+ 1;
        }
        
        update();
        return toRet;
    }
    
    bool hasNext() {
        return loc < comp.size();
    }
};




class StringIterator {
public:
    string s;
    int i;
    int n;
    int pt;
    int cnt;
    void load(){
        i=pt;
        cnt =0;
        if(i<n) {
            pt++;
            while(pt<n&&'0'<=s[pt]&&s[pt]<='9') cnt= cnt *10 + s[pt++] -'0';
        }
    }
    StringIterator(string compressedString) {
        s = compressedString;
        pt = 0;
        n=s.length();
        load();
    }
    
    char next() {
        if (hasNext()){
            char ans = s[i];
            if(--cnt==0) load();
            return ans;
        }
        return ' ';
    }
    
    bool hasNext() {
        return cnt>0 || pt<n;
    }
};

/**
 * Your StringIterator object will be instantiated and called as such:
 * StringIterator obj = new StringIterator(compressedString);
 * char param_1 = obj.next();
 * bool param_2 = obj.hasNext();
 */
 
 
 
 
 static int unsyncio = []()
{
    std::ios::sync_with_stdio(false);
    cin.tie(nullptr);
    return 0;  
}();

class StringIterator {
public:
    StringIterator(string compressedString) {
        stringstream ss(compressedString);
        while (!ss.eof()) {
            char ch;
            int num;
            ss >> ch;
            ss >> num;
            chars.push_back(ch);
            nums.push_back(num);
        }
        nextGroup = 0;
        nextPos = 0;
    }
    
    char next() {
        if (hasNext()) {
            char res = chars[nextGroup];
            if (++nextPos >= nums[nextGroup]) {
                nextPos = 0;
                nextGroup++;
            }
            return res;
        }
        return ' ';
    }
    
    bool hasNext() {
        return nextGroup < nums.size() && nextPos < nums[nextGroup];
    }
    
private:
    vector<char> chars;
    vector<int> nums;
    int nextGroup, nextPos;
};

/**
 * Your StringIterator object will be instantiated and called as such:
 * StringIterator obj = new StringIterator(compressedString);
 * char param_1 = obj.next();
 * bool param_2 = obj.hasNext();
 */
