249.group-shifted-strings
https://leetcode.com/problems/group-shifted-strings/


Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

Example:

Input: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
Output: 
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]


class Solution {
public:
    vector<vector<string>> groupStrings(vector<string>& strings) {
        if (strings.empty() || strings.size() == 0)
            return {};
        
        vector<vector<string>> resStr;
        unordered_map<string, vector<string>> strMap; // <distanaceBetweenEachChar, stringsWithSameDistance>
        
        for (int i = 0; i < strings.size(); i++) {
            string curStrDist = getCharDistance(strings[i]);  // Get the char distance
            strMap[curStrDist].push_back(strings[i]);
        }
        
        auto it = strMap.begin();
        while (it != strMap.end()) {
            resStr.push_back(it->second);
            it++;
        }
        
        return resStr;
    }
    
private:
	  // Function to get the distance between each char in s
    string getCharDistance(string s) {
        if (s.size() == 1) return "-1"; // Case when s is a single char, use -1, insted of 0 to separate the case s = 'a' and s = "aa"
				// Store the distance as string
        string resDistance = "";
        for (int i = 1; i < s.size(); i++) {
            resDistance += to_string(((s[i]-s[i-1]) + 26) % 26);
        }
        
        return resDistance;
    }
};






class Solution {
public:
    vector<vector<string>> groupStrings(vector<string>& strings) {
        vector<vector<string> > res;
        unordered_map<string, vector<string> > map;
        for (const auto& s : strings) {
            if (!s.empty()) {
                char first = s[0];
                string str(s);
                for (auto& c : str) {
                    c = (c - first + 26) % 26;
                }
                // cout << s << " : " << str << endl;
                map[str].push_back(s);
            }
        }
        for (const auto& seq : map) {
            res.push_back(seq.second);
        }
        return res;
    }
};
