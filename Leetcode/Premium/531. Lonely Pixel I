531. Lonely Pixel I
https://leetcode.com/problems/lonely-pixel-i/



Given a picture consisting of black and white pixels, find the number of black lonely pixels.

The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively.

A black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.

Example:
Input: 
[['W', 'W', 'B'],
 ['W', 'B', 'W'],
 ['B', 'W', 'W']]

Output: 3
Explanation: All the three 'B's are black lonely pixels.
Note:
The range of width and height of the input 2D array is [1,500].



class Solution {
public:
    int findLonelyPixel(vector<vector<char>>& picture) {
        if(picture.empty() || picture[0].empty()) return 0;
        
        int rows = picture.size(), cols = picture[0].size();
        
        vector<vector<int>> v(rows); // tracks indices of B pixels in each row
        vector<int> vc(cols, 0); // count of B pixels in each column
        
        for(int r = 0; r < rows; r++) {
            for(int c = 0; c < cols; c++) {
                if(picture[r][c] == 'B') {
                    v[r].push_back(c);
                    vc[c]++;
                }
            }
        }
        
        int lonely = 0;
        for(int r = 0; r < rows; r++) {
            if(v[r].size() == 1) {
                if(vc[v[r].front()] == 1)
                    lonely++;
            }
        }
        
        return lonely;
    }
};
