562. Longest Line of Consecutive One in Matrix
https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix/

Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.
Example:
Input:
[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]
Output: 3
Hint: The number of elements in the given matrix will not exceed 10,000.


Same idea, just reduce to O(n) space.
//36ms
class Solution {
public:
    // O(n=col) space solution.
    // Initialize array to (n+2) to avoid corner case.
    // If cur gird is 1, all array increase the previous one, otherwise set to 0.
    int longestLine(vector<vector<int>>& M) {
        if (M.empty()) return 0;
        int m = M.size(), n = M[0].size();
        int res = 0;
        vector<int> row_max(n+2, 0);
        vector<int> col_max(n+2, 0);
        vector<int> diag_max(n+2, 0);
        vector<int> antid_max(n+2, 0);
        for (int i = 0; i < m; i++) {
            int left_top = diag_max[0];
            for (int j = 0; j < n; j++) {
                if (M[i][j] == 1){
                    int temp = diag_max[j+1];
                    row_max[j+1] = row_max[j] + 1;
                    col_max[j+1] = col_max[j+1] + 1;
                    diag_max[j+1] = left_top + 1;
                    antid_max[j+1] = antid_max[j+2] + 1;
                    left_top = temp;
                }
                else {
                    left_top = diag_max[j+1];
                    row_max[j+1] = col_max[j+1] = diag_max[j+1] = antid_max[j+1] = 0;
                }
                res = max(res, max(row_max[j+1], col_max[j+1]));
                res = max(res, max(diag_max[j+1], antid_max[j+1]));
            }
        }
        return res;
    }
};




//sample 20 ms submission
class Solution {
public:
    int longestLine(vector<vector<int>>& M) {
        if(M.empty() || M[0].empty()) {return 0;}
        
        const int n = M.size();
        const int m = M[0].size();
        
        vector<int> col(m, 0);
        vector<int> diag(n+m-1, 0);
        vector<int> antidiag(n+m-1, 0);
        
        int length = 0;
        for (int i = 0; i < n; i++) {
            int row = 0;
            for (int j = 0; j < m; j++) {
                if (M[i][j] == 0) {row = col[j] = diag[j-i+n-1] = antidiag[j+i] = 0;}
                else {
                    row++;
                    col[j]++;
                    diag[j-i+n-1]++;
                    antidiag[j+i]++;
                    length = max({length, row, col[j], diag[j-i+n-1], antidiag[j+i]});
                }
            }
        }
        return length;
    }
};
