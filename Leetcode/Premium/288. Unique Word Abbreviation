288. Unique Word Abbreviation
https://leetcode.com/problems/unique-word-abbreviation/


An abbreviation of a word follows the form <first letter><number><last letter>. Below are some examples of word abbreviations:

a) it                      --> it    (no abbreviation)

     1
     ↓
b) d|o|g                   --> d1g

              1    1  1
     1---5----0----5--8
     ↓   ↓    ↓    ↓  ↓    
c) i|nternationalizatio|n  --> i18n

              1
     1---5----0
     ↓   ↓    ↓
d) l|ocalizatio|n          --> l10n
Assume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word's abbreviation is unique if no other word from the dictionary has the same abbreviation.

Example:

Given dictionary = [ "deer", "door", "cake", "card" ]

isUnique("dear") -> false
isUnique("cart") -> true
isUnique("cane") -> false
isUnique("make") -> true



//100ms
class ValidWordAbbr {
public:
  unordered_map<string,unordered_set<string>> abbrev_map;
  ValidWordAbbr(vector<string> dictionary) {
    for(int i=0; i<dictionary.size(); i++){
      if(dictionary[i].size()<3)
	continue;
      abbrev_map[dictionary[i][0]+to_string(dictionary[i].size()-2)+dictionary[i][dictionary[i].size()-1]].insert(dictionary[i]);
    }
  }
  
  bool isUnique(string word) {
    if(abbrev_map[ word[0]+to_string(word.size()-2)+word[word.size()-1] ].size() == 0 )
      return true;
    else{
      if(abbrev_map[ word[0]+to_string(word.size()-2)+word[word.size()-1] ].size() > 1 )
	return false;
      else{ 
	if(abbrev_map[ word[0]+to_string(word.size()-2)+word[word.size()-1] ].count(word) == 1)
	  return true;
	else
	  return false;
      }
    }
  }
};


/**
 * Your ValidWordAbbr object will be instantiated and called as such:
 * ValidWordAbbr obj = new ValidWordAbbr(dictionary);
 * bool param_1 = obj.isUnique(word);
 */
 
 
 
 
 class ValidWordAbbr {
private:
    unordered_map<string,string> set;
public:
    ValidWordAbbr(vector<string> dictionary) {
        for(string s:dictionary)
        {
            string tmp="";
            tmp+=s[0];
            tmp+=to_string(s.length()-2);
            tmp+=s[s.length()-1];
            if(set.find(tmp)==set.end())
                set[tmp]=s;
            else if(set[tmp]!=s)
                set[tmp]="";
        }
    }
    
    bool isUnique(string word) {
        string tmp="";
        tmp+=word[0];
        tmp+=to_string(word.length()-2);
        tmp+=word[word.length()-1];
        if(set.find(tmp)==set.end())
            return true;
        else if(set[tmp]==word)
            return true;
        else
            return false;
    }
};
