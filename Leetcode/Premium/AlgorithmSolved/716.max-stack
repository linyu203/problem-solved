https://leetcode.com/problems/max-stack/
716.max-stack
Design a max stack that supports push, pop, top, peekMax and popMax.

push(x) -- Push element x onto stack.
pop() -- Remove the element on top of the stack and return it.
top() -- Get the element on the top.
peekMax() -- Retrieve the maximum element in the stack.
popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.
Example 1:
MaxStack stack = new MaxStack();
stack.push(5); 
stack.push(1);
stack.push(5);
stack.top(); -> 5
stack.popMax(); -> 5
stack.top(); -> 1
stack.peekMax(); -> 5
stack.pop(); -> 1
stack.top(); -> 5
Note:
-1e7 <= x <= 1e7
Number of operations won't exceed 10000.
The last four operations won't be called when stack is empty.



class MaxStack {
public:
    /** initialize your data structure here. */
    multiset<int>ms;
    stack<int>st;
    MaxStack() {
        
    }
    
    void push(int x) {
        st.push(x);
        ms.insert(x);
    }
    
    int pop() {
        int tt = st.top();
        st.pop();
        auto i = ms.find(tt);
        ms.erase(i);
        return tt;
    }
    
    int top() {
        return st.top();
    }
    
    int peekMax() {
        return *(ms.rbegin());
    }
    
    int popMax() {
        int tt = *(ms.rbegin());
        auto i = ms.find(tt);
        ms.erase(i);
        stack<int>ss;
        while(tt != st.top()){
            ss.push(st.top());
            st.pop();
        }
        st.pop();
        while(!ss.empty()){
            st.push(ss.top());
            ss.pop();
        }
        return tt;
    }
};

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.peekMax();
 * int param_5 = obj.popMax();
 */
