https://leetcode.com/problems/graph-valid-tree/
261.graph-valid-tree
Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.


class Solution {
    int getpa(int a, vector<int>&pa){
        if(pa[a]==a)
            return a;
        return pa[a]=getpa(pa[a],pa);
    }
    bool unionfound(int a, int b, vector<int>&pa){
        int fa = getpa(a,pa);
        int fb = getpa(b,pa);
        if(fa==fb)return true;
        if(fa<fb){
            pa[fb]=fa;
            pa[b]=fa;
        }else{
            pa[fa]=fb;
            pa[a]=fb;
        }
        return false;
    }
public:
    bool validTree(int n, vector<pair<int, int>>& edges) {
        vector<int>pa(n,0);
        for(int i = 1; i < n; i++){
            pa[i]=i;
        }
        for(auto i:edges){
            if(unionfound(i.first,i.second,pa)){
                return false;
            }
        }
        for(int i = 1; i < n; i++){
            if(pa[i]==i)
                return false;
        }
        return true;
    }
};
