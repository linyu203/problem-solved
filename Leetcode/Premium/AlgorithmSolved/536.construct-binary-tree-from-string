https://leetcode.com/problems/construct-binary-tree-from-string/
536.construct-binary-tree-from-string
You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.

Example:
Input: "4(2(3)(1))(6(5))"
Output: return the tree root node representing the following tree:

       4
     /   \
    2     6
   / \   / 
  3   1 5   
Note:
There will only be '(', ')', '-' and '0' ~ '9' in the input string.
An empty tree is represented by "" instead of "()".



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    TreeNode* help(const string &s, int &i){
        int temp = 0;
        int sign= 1;
        bool left = true;
        TreeNode*res=nullptr;
        while(true){
            if(s[++i]>='0'&&s[i]<='9'){
                temp=temp*10+s[i]-'0';
            }else if(s[i]=='-'){
                sign = -1;
            }else if(s[i]=='('){
                if(left){
                    res = new TreeNode(sign*temp);
                    res->left = help(s,i);
                    left=false;
                }else{
                    res->right = help(s,i);
                }
            }else{
                if(!res&& i!=1)
                    res = new TreeNode(sign*temp);
                return res;
            }
        }
        return nullptr;
    }
public:
    TreeNode* str2tree(string s) {
        int i = 0;
        s = "("+s+")";
        return help(s,i);
    }
};
