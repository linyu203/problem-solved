https://leetcode.com/problems/walls-and-gates/
286.walls-and-gates
You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4


class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        int m = rooms.size();
        if(m==0)return;
        int n = rooms[0].size();
        queue<pair<long,int>>qp;
        for(long i = 0; i < m;i++){
            for(long j =0; j < n;j++){
                if(rooms[i][j]==0){
                    long key = (i<<32l)|j;
                    qp.push({key,0});
                }
            }
        }
        
        while(!qp.empty()){
            long key = qp.front().first;
            int st = qp.front().second;
            qp.pop();
            long x = key>>32l;
            long y = key&0xffffffff;
            if(x>0&&rooms[x-1][y]>(st+1)){
                rooms[x-1][y] = st+1;
                key = ((x-1)<<32l)|y;
                qp.push({key,st+1});
            }
            if(y>0&&rooms[x][y-1]>(st+1)){
                rooms[x][y-1] = st+1;
                key = ((x)<<32l)|(y-1);
                qp.push({key,st+1});
            }
            if(x<m-1&&rooms[x+1][y]>(st+1)){
                rooms[x+1][y] = st+1;
                key = ((x+1)<<32l)|y;
                qp.push({key,st+1});
            }
            if(y<n-1&&rooms[x][y+1]>(st+1)){
                rooms[x][y+1] = st+1;
                key = ((x)<<32l)|(y+1);
                qp.push({key,st+1});
            }
        }
    }
};
