https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/
325.maximum-size-subarray-sum-equals-k
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
Example 2:

Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
Follow Up:
Can you do it in O(n) time?






class Solution {
public:
    int maxSubArrayLen(vector<int>& nums, int k) {
        int n =nums.size();
        if(n==0)return 0;
        unordered_map<int,int>ump;
        int res = 0;
        if(nums[0]==k)res=1;
        ump[nums[0]]=0;
        for(int i =1; i < n; i++){
            nums[i]+=nums[i-1];
            if(nums[i]==k)
                res = i+1;
            ump[nums[i]]=i;
        }
        for(int i = 0; i < n-1; i++){
            int tt = nums[i]+k;
            if(ump.count(tt)){
                res = max(res,ump[tt]-i);
            }
        }
        return res;
    }
};
