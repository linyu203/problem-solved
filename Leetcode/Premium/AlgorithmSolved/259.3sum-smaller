https://leetcode.com/problems/3sum-smaller/
259.3sum-smaller
Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]
Follow up: Could you solve it in O(n2) runtime?


class Solution {
public:
    int threeSumSmaller(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int res = 0,k,tt;
        for(int i = nums.size()-1; i >=2; i--){
            k = -1;
            for(int j = i-1; j>0; j--){
                tt = target-nums[i]-nums[j];
                while(k<j && nums[k+1]<tt)
                    k++;
                res += min(k,j-1)+1;
            }
        }
        return res;
    }
};
