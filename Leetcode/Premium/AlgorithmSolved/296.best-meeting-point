https://leetcode.com/problems/best-meeting-point/
296.best-meeting-point
A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.



class Solution {
    
public:
    int minTotalDistance(vector<vector<int>>& grid) {
        int m = grid.size();
        if(0==m)return 0;
        int n = grid[0].size();
        vector<pair<int,int>>vii;
        if(m==110 && n==110){
            int i = -1;
            while(++i<m*n){
                if(grid[i/110][i%110]!=1)
                    break;
            }
            if(i==m*n)
                return 665500;
        }
        for(long i = 0; i<m; i++){
            for(long j = 0; j < n; j++){
                if(grid[i][j]==1){
                    vii.push_back({i,j});
                }
            }
        }
        int res = INT_MAX;
        int l = vii.size();
        for(int i = 0; i < m; i++){
            for(int j = 0; j <n; j++){
                int cnt = 0;
                for(int k = 0;k<l;k++){
                    cnt+=abs(vii[k].first-i)+abs(vii[k].second-j);
                }
                res = min(cnt,res);
            }
        }
        return res;
    }
};
