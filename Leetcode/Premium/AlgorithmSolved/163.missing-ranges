https://leetcode.com/problems/missing-ranges/
163.missing-ranges
Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.

Example:

Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,
Output: ["2", "4->49", "51->74", "76->99"]


class Solution {
public:
    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {
        vector<string>res;
        int n = nums.size();
        if(n==0) 
            return (lower==upper)?vector<string>{to_string(lower)}:vector<string>{to_string(lower)+"->"+to_string(upper)};
        string tmp;
        if(nums[0]==lower){
            
        }else if(nums[0]==lower+1){
            res.push_back(to_string(lower));
        }else if(nums[0]>lower+1){
            res.push_back(to_string(lower)+"->"+to_string(nums[0]-1));
        }
        //cout<<"14"<<res.size()<<endl;
        for(int i= 1; i < n; i++){
            if(nums[i-1]==nums[i]|| nums[i-1]==nums[i]-1){
                
            }else if(nums[i-1]==nums[i]-2){
                res.push_back(to_string(nums[i-1]+1));
            }else if(nums[i-1]<nums[i]-2){
                res.push_back((to_string(nums[i-1]+1))+"->"+(to_string(nums[i]-1)));
            }
            //cout<<"23"<<res.size()<<endl;
        }
        if(nums[n-1]==upper){}
        else if(nums[n-1]==upper-1){
            res.push_back(to_string(upper));
        }else if(nums[n-1]<=upper-1){
            res.push_back(to_string(nums[n-1]+1)+"->"+to_string(upper));
        }
        //cout<<"30"<<res.size()<<endl;
        return res;
    }
};
