https://leetcode.com/problems/closest-leaf-in-a-binary-tree/
742.closest-leaf-in-a-binary-tree
Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a TreeNode object.

Example 1:

Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2

Output: 2 (or 3)

Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
Example 2:

Input:
root = [1], k = 1
Output: 1

Explanation: The nearest leaf node is the root node itself.
Example 3:

Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6

Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
Note:
root represents a binary tree with at least 1 node and at most 1000 nodes.
Every node has a unique node.val in range [1, 1000].
There exists some node in the given binary tree for which node.val == k.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int mdep,res;
    int kk;
    int help(TreeNode * root, int & dep,int &rv){
        bool rr = false;
        int depl=2000,depr=2000,resl,resr,brl=-1,brr=-1;
        if(root->val == kk)
            rr = true;
        if(!root->left && !root->right){
            dep = 0;
            rv = root->val;
        }else{
            if(root->left)
                brl = help(root->left,depl,resl);
            if(root->right)
                brr = help(root->right,depr,resr);
            if(depl<=depr){
                dep = depl+1;
                rv  = resl;
            }else{
                dep = depr+1;
                rv = resr;
            }
        }
        if(rr){
            mdep = dep;
            res = rv;
            return 1;
        }else if(brl>=0){
            if(mdep>(depr+brl+1)){
                mdep = depr+brl+1;
                res = rv;
            }
            return brl+1;
        }else if(brr>=0){
            if(mdep>(depl+brr+1)){
                mdep = depl+brr+1;
                res = rv;
            }
            return brr+1;
        }
        
        return -1;
    }
public:
    int findClosestLeaf(TreeNode* root, int k) {
        if(!root)return k;
        if(!root->left && !root->right)
            return k;
        mdep = INT_MAX;
        res = k;
        kk= k;
        int dp,rv;
        (void)help(root,dp,rv);
        return res;
    }
};
