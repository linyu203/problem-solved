281. Zigzag Iterator
https://leetcode.com/problems/zigzag-iterator/

Given two 1d vectors, implement an iterator to return their elements alternately.

Example:

Input:
v1 = [1,2]
v2 = [3,4,5,6] 

Output: [1,3,2,4,5,6]

Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,3,2,4,5,6].
Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7].

0
Just use two iterators on different vectors. Use an indicator to show which vector we are looking at. Each call of next() will flip the indicator over through ind_ ^= true;. Of course you need to check the special case that one iterator has reached the end while the other has not yet through the if-else part inside. No magic or complicated data structure, right?

class ZigzagIterator {
public:
    ZigzagIterator(vector<int>& v1, vector<int>& v2)
        :
        it1_(v1.begin()), it2_(v2.begin()),
        end1_(v1.end()), end2_(v2.end()),
        ind_(true) {
        
    }

    int next() {
        int r;
        if (ind_) {
            if (it1_!=end1_) r = *it1_++;
            else r = *it2_++;
        } else {
            if (it2_!=end2_) r = *it2_++;
            else r = *it1_++;
        }
        ind_ ^= true;
        return r;
    }

    bool hasNext() {
        return (it1_!=end1_ || it2_!=end2_);
    }
private:
    vector<int>::iterator it1_;
    vector<int>::iterator it2_;
    vector<int>::iterator end1_;
    vector<int>::iterator end2_;
    bool ind_;
};




class ZigzagIterator {
public:
    ZigzagIterator(vector<int>& v1, vector<int>& v2) {
        if (!v1.empty()) q.push(make_pair(v1.begin(), v1.end()));
        if (!v2.empty()) q.push(make_pair(v2.begin(), v2.end()));
    }

    int next() {
        auto it = q.front().first, end = q.front().second;
        q.pop();
        if(it + 1 != end) q.push(make_pair(it + 1, end));
        return *it;
    }

    bool hasNext() {
        return !q.empty();
    }
private:
    queue<pair<vector<int>::iterator, vector<int>::iterator>> q;
};
