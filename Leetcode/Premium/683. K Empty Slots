683. K Empty Slots
https://leetcode.com/problems/k-empty-slots/

There is a garden with N slots. In each slot, there is a flower. The N flowers will bloom one by one in N days. In each day, there will be exactly one flower blooming and it will be in the status of blooming since then.

Given an array flowers consists of number from 1 to N. Each number in the array represents the place where the flower will open in that day.

For example, flowers[i] = x means that the unique flower that blooms at day i will be at position x, where i and x will be in the range from 1 to N.

Also given an integer k, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is k and these flowers are not blooming.

If there isn't such day, output -1.

Example 1:
Input: 
flowers: [1,3,2]
k: 1
Output: 2
Explanation: In the second day, the first and the third flower have become blooming.
Example 2:
Input: 
flowers: [1,2,3]
k: 1
Output: -1
Note:
The given array will be in the range [1, 20000].

class Solution {
public:
    int kEmptySlots(vector<int>& flowers, int k) {
        set<int> bloomed;
        for (int day=0; day<flowers.size(); ++day){
            auto it = bloomed.insert(flowers[day]).first;
            if (it!=bloomed.begin() && *prev(it)==flowers[day]-k-1)return day+1;
            if (it!=prev(bloomed.end()) && *next(it)==flowers[day]+k+1)return day+1;}
        return -1;
    }
};

class Solution {
public:
    int kEmptySlots(vector<int>& flowers, int k) {
      int N = flowers.size();
      vector<int> days(N);
      for(int j=0; j<N; ++j) days[flowers.at(j) - 1] = j + 1;
      int iLeft = 0, iRight = k + 1;
      int ans = numeric_limits<int>::max();
      for(int i=1; iRight<N; ++i){
        if(days.at(i) > days.at(iLeft) && days.at(i) > days.at(iRight)) continue;
        if(i == iRight) ans = min(ans, max(days.at(iLeft), days.at(iRight)));
        iLeft = i; 
        iRight = iLeft + k + 1;
      }
      return (ans == numeric_limits<int>::max() ? -1 : ans);  
    }
};





#include <bitset>
class Solution {
public:
bool scan_left(std::vector<bool>& bloom_status, int k, int pos){
  const int start = pos - (k + 1);
  if(start< 0){
    return false;
  }
  if(!bloom_status[start]){
    return false;
  }
  for(int i = (start+1); i < pos; i++){
    if(bloom_status[i]){
      return false;
    }
  }
  return true;

}

bool scan_right(std::vector<bool>& bloom_status, int k, int pos){
  const int end = pos + k + 1;
  if(end >= bloom_status.size()){
    return false;
  }
  if(!bloom_status[end]){
    return false;
  }
  for(int i = pos+1; i < end; i++){
    if(bloom_status[i]){
      return false;
    }
  }
  return true;

}
    int kEmptySlots(vector<int>& flowers, int k) {
          std::vector<bool> bloom_status = std::vector<bool>(flowers.size());
  for(int i = 0; i < flowers.size(); i++){
    bloom_status[flowers[i]-1] = true;
    if(scan_left(bloom_status, k, flowers[i]-1) || scan_right(bloom_status, k, flowers[i]-1)){
      return i + 1;
    }
  }
  return -1;
    }
};

static int desyncio = []() {
  std::ios::sync_with_stdio(false);
  cin.tie(nullptr);
  return 0;
}();
