254.factor-combinations
https://leetcode.com/problems/factor-combinations/
Numbers can be regarded as product of its factors. For example,

8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.

Note:

You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Example 1:

Input: 1
Output: []
Example 2:

Input: 37
Output:[]
Example 3:

Input: 12
Output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
Example 4:

Input: 32
Output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]


class Solution {
private:
    vector<vector<int>> res;
    vector<int> stk;

    void getFactors(int start, int n) {
        int upper = sqrt(n);
        for (int i = start; i <= upper; ++i) {
            if (n % i == 0) {
                stk.push_back(i);
                stk.push_back(n / i);
                res.push_back(stk);
                stk.pop_back();
                getFactors(i, n / i);
                stk.pop_back();
            }
        }
    }
public:
    vector<vector<int>> getFactors(int n) {
        getFactors(2, n);
        return res;
    }
};



class Solution {
public:
    vector<int> cur;
    vector<vector<int>> res;
    void dfs (int n, int start) {
        for (int i = start; i <= sqrt(n) ; i++) {
            if (n % i == 0) {
                cur.push_back(i);
                cur.push_back(n /i);
                res.push_back(cur);
                cur.pop_back();
                dfs(n/i, i);
                cur.pop_back();
            }
        } 
    }
    vector<vector<int>> getFactors(int n) {
        dfs(n, 2);
        return res;
    }
};
