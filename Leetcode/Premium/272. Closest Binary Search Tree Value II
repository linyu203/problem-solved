272. Closest Binary Search Tree Value II
https://leetcode.com/problems/closest-binary-search-tree-value-ii/

Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k ≤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?


#include <vector>
#include <algorithm>

using namespace std;

class Solution {
private:
    vector<TreeNode*> pstk;
    vector<TreeNode*> sstk;
    
     void nextPre() {
        auto cur = pstk.back()->left;
        pstk.pop_back();
        while (cur != nullptr) {
            pstk.push_back(cur);
            cur = cur->right;
        }
    }
    
     void nextSuc() {
        auto cur = sstk.back()->right;
        sstk.pop_back();
        while (cur != nullptr) {
            sstk.push_back(cur);
            cur = cur->left;
        }
    }
public:
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        auto cur = root;
        while (cur != nullptr) {
            if (cur->val <= target) {
                pstk.push_back(cur);
                cur = cur->right;
            } else {
                cur = cur->left;
            }
        }
        
        cur = root;
        while (cur != nullptr) {
            if (cur->val > target) {
                sstk.push_back(cur);
                cur = cur->left;
            } else {
                cur = cur->right;
            }
        }
        
        vector<int> res;
        while (res.size() < (size_t)k && !pstk.empty() && !sstk.empty()) {
            if (abs(target - pstk.back()->val) < abs(target - sstk.back()->val)) {
                res.push_back(pstk.back()->val);
                nextPre();
            } else {
                res.push_back(sstk.back()->val);
                nextSuc();
            }
        }
        
        while (res.size() < (size_t)k && !pstk.empty()) {
            res.push_back(pstk.back()->val);
            nextPre();
        }
        while (res.size() < (size_t)k && !sstk.empty()) {
            res.push_back(sstk.back()->val);
            nextSuc();
        }
        
        return res;
    }
};



sample 8 ms submission
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // method 1: iteration and store the elements in a vector, then scan
    // vector<int> closestKValues(TreeNode* root, double target, int k) {
    //     vector<int> res;
    //     vector<int> arr;
    //     inorder(root, arr);
    //     //find the index of element that is closest to target.
    //     int idx = 0;
    //     double diff = numeric_limits<double>::max();
    //     for (int i = 0; i < arr.size(); i++) {
    //         if (abs(arr[i] - target) < diff) {
    //             diff = abs(arr[i] - target);
    //             idx = i;
    //         }
    //     }
    //     // search to left/right direction and find the minimum k.
    //     int left = idx - 1, right = idx + 1;
    //     for(int j = 0; j < k; j++) {
    //         res.push_back(arr[idx]);
    //         if (left >= 0 && right < arr.size()) { 
    //             if (abs(target - arr[left]) < abs(arr[right] - target)) {
    //                 idx = left;
    //                 left--;
    //             } else {
    //                 idx = right;
    //                 right++;
    //             }
    //         } else if (right < arr.size()) {
    //             idx = right;
    //             right++;
    //         } else if (left >= 0){
    //             idx = left;
    //             left--;
    //         }
    //     }
    //     return res;
    // }
    // void inorder(TreeNode* root, vector<int>& arr) {
    //     if (!root) return;
    //     inorder(root->left, arr);
    //     arr.push_back(root->val);
    //     inorder(root->right, arr);
    // }
    
    //  // method 2: do it in inorder traversal, recursion, 利用查找树递增特点。
    // vector<int> closestKValues(TreeNode* root, double target, int k) {
    //     vector<int> res;
    //     inorder(root, target, k, res);
    //     return res;
    // }
    // void inorder(TreeNode* root, double target, int k, vector<int>& res) {
    //     if (!root) return;
    //     inorder(root->left, target, k, res);
    //     if (res.size() < k) {
    //         res.push_back(root->val);
    //     } else if (abs(root->val - target) < abs(res[0] - target)) {
    //         res.erase(res.begin());
    //         res.push_back(root->val);
    //     } else {
    //         return;
    //     }
    //     inorder(root->right, target, k, res);
    // }
    
    // // method 3: iteration and stack
    // vector<int> closestKValues(TreeNode* root, double target, int k) {
    //     vector<int> res;
    //     TreeNode* p = root;
    //     stack<TreeNode*> s;
    //     while (p || !s.empty()) {
    //         while (p) {
    //             s.push(p);
    //             p = p->left;
    //         }
    //         p = s.top();
    //         s.pop();
    //         if (res.size() < k) {
    //             res.push_back(p->val);
    //         } else if (abs(p->val - target) < abs(res[0] - target)) {
    //             res.erase(res.begin());
    //             res.push_back(p->val);
    //         } else {
    //             break;
    //         }
    //         p = p->right;
    //     }
    //     return res;
    // }
    // // method 4: priority queue
    // vector<int> closestKValues(TreeNode* root, double target, int k) {
    //     vector<int> res;
    //     priority_queue<pair<double, int>> q;
    //     inorder(root, target, k, q);
    //     while(!q.empty()) {
    //         res.push_back(q.top().second);
    //         q.pop();
    //     }
    //     return res;
    // }
    // void inorder(TreeNode* root, double target, int k, priority_queue<pair<double, int>>& q) {
    //     if (!root) return;
    //     inorder(root->left, target, k, q);
    //     q.push({abs(root->val - target), root->val});
    //     if (q.size() > k) {
    //         q.pop();
    //     }
    //     inorder(root->right, target, k, q);
    // }
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        vector<int> res;
        stack<TreeNode*> pre, suc;
        while (root) {
            if (root->val <= target) {
                pre.push(root);
                root = root->right;
            } else {
                suc.push(root);
                root = root->left;
            }
        }
        while (k-- > 0) {
            if (suc.empty() || !pre.empty() && target - pre.top()->val < suc.top()->val - target) {
                res.push_back(pre.top()->val);
                getPredecessor(pre);
            } else {
                res.push_back(suc.top()->val);
                getSuccessor(suc);
            }
        }
        return res;
    }
    void getPredecessor(stack<TreeNode*> &pre) {
        TreeNode *t = pre.top(); pre.pop();
        if (t->left) {
            pre.push(t->left);
            while (pre.top()->right) pre.push(pre.top()->right);
        }
    }
    void getSuccessor(stack<TreeNode*> &suc) {
        TreeNode *t = suc.top(); suc.pop();
        if (t->right) {
            suc.push(t->right);
            while (suc.top()->left) suc.push(suc.top()->left);
        }
    }
};
