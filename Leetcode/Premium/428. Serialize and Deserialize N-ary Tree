428. Serialize and Deserialize N-ary Tree
https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/


Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following 3-ary tree

 



 

as [1 [3[5 6] 2 4]]. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 

Note:

N is in the range of [1, 1000]
Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(Node* root){
        if(!root){
            return "";
        }
        
        ostringstream ss;
        ss << root->val;
        string str = "(" + ss.str();
        for(auto &n : root->children){
            if(n){
                str += serialize(n);
            }
        }
        
        str += ")";
        return str;
    }

    Node *des(auto &b, const auto e){
        if(b == e){
            return nullptr;
        }
        
        if(*b == '('){
            b++;
        }
        
        string curr;
        while(isdigit(*b)){
            curr.push_back(*b++);
        }
				
        //parse the node value
        istringstream  ss(curr);
        int nodeval = 0;
        ss >> nodeval;
        
        Node *ret = new Node(nodeval);
        
        //so long as we see a "(" it means we have more children   
        while(*b == '('){
            ret->children.push_back(des(b,e));
        }
				
        //pass the ")" and return   
        b++;
        return ret;
    }
        
    // Decodes your encoded data to tree.
    Node* deserialize(string data) {
        auto b = data.begin();
        return des(b ,data.end());
    }
};






class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(Node* root) {
        if (!root)
            return {};
        string ret;
        function<void(const Node*)> helper = [&](const Node* node){
            ret += to_string(node->val);
            ret.push_back(' ');
            ret += to_string(node->children.size());
            ret.push_back(' ');
            for (auto child : node->children) {
                helper(child);
            }
        };
        helper(root);
        return ret;
    }

    // Decodes your encoded data to tree.
    Node* deserialize(string data) {
        if (data.empty()) {
            return nullptr;
        }
        size_t pos = 0;
        function<Node*()> helper = [&](){
            Node* ret = new Node();
            size_t consumed = 0;
            ret->val = stoi(data.substr(pos, 10), &consumed);
            pos += consumed;
            ret->children.resize(stoi(data.substr(pos, 10), &consumed));
            pos += consumed;
            for(auto& child : ret->children) {
                child = helper();
            }
            return ret;
        };
            
        return helper();
    }
};
